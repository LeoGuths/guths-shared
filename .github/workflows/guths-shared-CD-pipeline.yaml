name: Guths Shared CD

on:
  push:
    branches: ['master']

env:
  PROJECT_PATH: Guths.Shared

jobs:
  publish:
    name: Build and Publish NuGet Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .Net
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: Build Release
        run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore
        
      - name: Create NuGet Package
        run: dotnet pack ${{ env.PROJECT_PATH }} -c Release --no-build --output nupkgs

      - name: Publish to NuGet.org
        run: dotnet nuget push ./nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Extract Version
        id: version
        run: |
          VERSION=$(grep -oP '<Version>\K[^<]*' ${{ env.PROJECT_PATH }}/*.csproj)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Versão extraída: $VERSION"
          
#      - name: Discord Success Notification
#        if: success()
#        run: |
#          curl -H "Content-Type: application/json" \
#               -d '{
#                 "embeds": [{
#                   "title": "✅ NuGet Package v${{ steps.version.outputs.version }} Publicado!",
#                   "color": 3066993,
#                   "fields": [
#                     {"name": "📦 Projeto", "value": "${{ env.PROJECT_PATH }}", "inline": true},
#                     {"name": "🏷️ Versão", "value": "v${{ steps.version.outputs.version }}", "inline": true},
#                     {"name": "👤 Autor", "value": "${{ github.actor }}", "inline": true},
#                     {"name": "🔗 Commit", "value": "[`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})", "inline": false}
#                   ],
#                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
#                 }]
#               }' \
#               ${{ secrets.DISCORD_WEBHOOK_URL }}
#
#      - name: Discord Failure Notification
#        if: failure()
#        run: |
#          curl -H "Content-Type: application/json" \
#               -d '{
#                 "embeds": [{
#                   "title": "❌ Falha na Publicação v${{ steps.version.outputs.version }}",
#                   "color": 15158332,
#                   "fields": [
#                     {"name": "📦 Projeto", "value": "${{ env.PROJECT_PATH }}", "inline": true},
#                     {"name": "🏷️ Versão", "value": "v${{ steps.version.outputs.version }}", "inline": true},
#                     {"name": "👤 Autor", "value": "${{ github.actor }}", "inline": true},
#                     {"name": "🔗 Commit", "value": "[`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})", "inline": false},
#                     {"name": "📋 Logs", "value": "[Ver logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false}
#                   ],
#                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
#                 }]
#               }' \
#               ${{ secrets.DISCORD_WEBHOOK_URL }}
  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: [ publish ]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Check job status
        id: check-status
        run: |
          if [[ "${{ needs.publish.result }}" == 'failure' ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord Notification
        uses: ./.github/workflows/actions/discord-notification
        with:
          project_path: ${{ env.PROJECT_PATH }}
          status: ${{ steps.check-status.outputs.status }}
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}